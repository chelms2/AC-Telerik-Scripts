{
  "__type": "ArtOfTest.WebAii.Design.ProjectModel.Test",
  "__value": {
    "DomStatesCounter": {},
    "WebKitExecutionDelay": 0,
    "ReuseAppWindow": 0,
    "ProfilerResultsDirectory": null,
    "ProfilerBenchmarkResultsFilePath": null,
    "ProfilerBenchmarkResultsId": "00000000-0000-0000-0000-000000000000",
    "ProfilerConfigurationId": "00000000-0000-0000-0000-000000000000",
    "ProfilerConfigurations": {},
    "CurrentReferences": [
      "System",
      "System.Core",
      "ArtOfTest.WebAii, Version=2021.2.809.0, Culture=neutral, PublicKeyToken=4fd5f65be123776c",
      "ArtOfTest.WebAii.Messaging, Version=2021.2.809.0, Culture=neutral, PublicKeyToken=4fd5f65be123776c",
      "ArtOfTest.WebAii.Design, Version=2021.2.809.0, Culture=neutral, PublicKeyToken=4fc62bbc3827ab1d",
      "Telerik.WebAii.Controls.Html, Version=2021.2.809.0, Culture=neutral, PublicKeyToken=528163f3e645de45",
      "Telerik.WebAii.Controls.Xaml, Version=2021.2.809.0, Culture=neutral, PublicKeyToken=528163f3e645de45",
      "Telerik.WebAii.Controls.Xaml.Wpf, Version=2021.2.809.0, Culture=neutral, PublicKeyToken=528163f3e645de45",
      "Telerik.TestingFramework.Controls.KendoUI, Version=2021.2.809.0, Culture=neutral, PublicKeyToken=528163f3e645de45",
      "Telerik.TestingFramework.Controls.KendoUI.Angular, Version=2021.2.809.0, Culture=neutral, PublicKeyToken=528163f3e645de45",
      "Telerik.TestingFramework.Controls.TelerikUI.Blazor, Version=2021.2.809.0, Culture=neutral, PublicKeyToken=528163f3e645de45",
      "Telerik.TestStudio.Translators.Common, Version=2021.2.809.0, Culture=neutral, PublicKeyToken=528163f3e645de45",
      "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
      "Microsoft.VisualBasic, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
      "System.Net, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
    ],
    "Steps": {
      "__type": "ArtOfTest.Common.Design.ProjectModel.AutomationStepList",
      "__value": [
        {
          "__type": "ArtOfTest.WebAii.Design.ProjectModel.AutomationStep",
          "__value": {
            "Runtime ID": "8e43d5cd-0bd9-4b0d-80fa-cb6a7f35896f",
            "Description": "Wait for '2500' msec.",
            "CustomDescription": null,
            "Step": {
              "__type": "ArtOfTest.WebAii.Design.IntrinsicTranslators.Descriptors.SleepActionDescriptor",
              "__value": {
                "WaitTime": 2500,
                "WaitOnElements": true,
                "WaitOnElementsTimeout": 30000,
                "UseStepWaitOnElementsTimout": false,
                "SearchByImageFirst": 0,
                "Pause": 0,
                "RunsAgainstVersion": "",
                "Constraints": {
                  "__type": "ArtOfTest.Common.Design.Extensibility.Descriptors.DescriptorConstraints",
                  "__value": {
                    "ConstraintValues": {}
                  }
                },
                "Elements": {},
                "StepType": 4,
                "LogMessageOnFailure": "",
                "EditorType": "",
                "DataBindingExpressions": {}
              }
            },
            "Enabled": true,
            "Order": 1,
            "Id": "",
            "StepState": 0,
            "ContinueOnFailure": false,
            "StepImageKey": "Report Distribution Scripturmqqi5k.ysc",
            "QcId": 0,
            "QcVersionStamp": 0,
            "Version": 200
          }
        },
        {
          "__type": "ArtOfTest.WebAii.Design.ProjectModel.AutomationStep",
          "__value": {
            "Runtime ID": "e2fb050b-964f-48ce-bba7-ab201de056e8",
            "Description": "New Coded Step",
            "CustomDescription": null,
            "Step": {
              "__type": "ArtOfTest.WebAii.Design.IntrinsicTranslators.Descriptors.CodedStepDescriptor",
              "__value": {
                "Code": "            // declare messagebox title and exception message variables\r\n            // If you want to debug the code, you may uncomment messageTitle and messagebox lines below.\r\n            // Also uncomment the using System.Windows.Forms line at the top.\r\n            \r\n            //string messageTitle = \"\";\r\n            string excMessages = \"\";\r\n            string reportEnvironment = \"\";\r\n            //MessageBoxButtons buttons = MessageBoxButtons.OK;\r\n            \r\n            // define the file lookup extention, this case .csv\r\n            string pattern = \"*.csv\";\r\n            var dirInfo = new DirectoryInfo(saveLocation);\r\n            \r\n                        \r\n            \r\n            // following line finds the latest csv file under dirInfo directory\r\n            var LatestFile = (from f in dirInfo.GetFiles(pattern) orderby f.LastWriteTime descending select f).First();            \r\n            //NativeWindow a = new NativeWindow();            \r\n            //a.AssignHandle(ActiveBrowser.Window.Handle);\r\n            \r\n            // show the most recent file on a messagebox and keep it in log file\r\n            //MessageBox.Show(a, LatestFile.ToString(), \"Latest File\", buttons, MessageBoxIcon.Information);\r\n            Log.WriteLine(\"Latest file - last step : \" + LatestFile.ToString());\r\n            \r\n            // Gmail Smtp settings. uncomment this if you need to test it.\r\n            /*\r\n            string gUser = \"telerikauditresults@gmail.com\";\r\n            string gPass = \"123Telerik\";\r\n            // email handling\r\n            var smtpClient = new SmtpClient(\"smtp.gmail.com\")\r\n            {\r\n                Port = 587,\r\n                Credentials = new NetworkCredential(gUser, gPass),\r\n                EnableSsl = true,\r\n                \r\n            };      \r\n            */\r\n            \r\n            // SMTP configuration without credentials       \r\n            MailMessage mail = new MailMessage();\r\n            SmtpClient SmtpServer = new SmtpClient();\r\n            SmtpServer.Host = \"mail.utshare.utsystem.edu\";\r\n            SmtpServer.Port = 25;\r\n            SmtpServer.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;\r\n            \r\n            //configure from-to e-mail addresses.\r\n            mail.To.Add(\"chelms@utsystem.edu\");\r\n            mail.From = new MailAddress(\"fromTelerik@utsystem.edu\");\r\n            \r\n            // If you want to debug the code, you may uncomment messageTitle and messagebox lines below.\r\n            // Also uncomment the using System.Windows.Forms line at the top. \r\n            // delegate (kind of function under function in C#) to print exception messages - \r\n            var printMessages = new Action<string, string>((exc, dbName) => {\r\n                // if there is no exceptions in the csv file, prompt a message and keep it in the log file\r\n                if(String.IsNullOrEmpty(exc))\r\n                {\r\n                    //messageTitle = \"Clean\";                    \r\n                    //MessageBox.Show(a, \"No SEC- exceptions found!\", messageTitle, buttons, MessageBoxIcon.Information); \r\n                    Log.WriteLine(exc);    \r\n                    \r\n                    // Below two lines are for gmail smtp. uncomment them if you need to use.\r\n                    // smtpClient.Send(gUser, \"ekopru@utsystem.edu\", \"SYSAudit Report for: \" + LatestFile.ToString() + \" -- \" + dbName , \"\\nThe audit is clean. No exceptions found!\" + excMessages);\r\n                    // Log.WriteLine(\"Email sent.\");\r\n                    \r\n                    //configure mail components.\r\n                    mail.Subject = LatestFile.ToString() + \" -- \" + dbName ;\r\n                    mail.IsBodyHtml = false;\r\n                    mail.Body = \"\\nThe audit is clean. No exceptions found!\";\r\n\r\n                    // Send email, catch if there is any error.\r\n                    try {\r\n                        SmtpServer.Send(mail);\r\n                        Log.WriteLine(\"Email sent without credentials\");\r\n                    }\r\n                    catch (Exception ex) {\r\n                        Log.WriteLine(\"Exception Message: \" + ex.Message);\r\n                        if (ex.InnerException != null)\r\n                            Log.WriteLine(\"Exception Inner:   \" + ex.InnerException);\r\n                    }                    \r\n                }\r\n                \r\n                // if there is/are exception(s) in the csv file, prompt a message, email the exceptions\r\n                // keep them in the log file, finally throw an exception to fail the test if you want to. (optional)\r\n                // At the moment it wont fail the test.\r\n                else\r\n                {\r\n                    //messageTitle = \"SEC- Errors found!\";\r\n                    //MessageBox.Show(a, exc, messageTitle, buttons, MessageBoxIcon.Warning); \r\n                    Log.WriteLine(exc);                                      \r\n                    // Below two lines are for gmail smtp. uncomment them if you need to use.\r\n                    // smtpClient.Send(gUser, \"ekopru@utsystem.edu\", \"SYSAudit Report for: \" + \" -- \" + dbName, \"(SEC- Exceptions ---\\n\" + excMessages);\r\n                    // Log.WriteLine(\"Email sent.\");\r\n                    \r\n                    //configure mail components.\r\n                    mail.Subject = LatestFile.ToString() + \" -- \" + dbName ;\r\n                    mail.IsBodyHtml = false;\r\n                    mail.Body = \"Security Exceptions --- \\n\" + excMessages;\r\n                    \r\n                    // Send the email, catch if there is any error.\r\n                    try {\r\n                        SmtpServer.Send(mail);\r\n                        Log.WriteLine(\"Email sent without credentials\");\r\n                    }\r\n                    catch (Exception ex) {\r\n                        Log.WriteLine(\"Exception Message: \" + ex.Message);\r\n                        if (ex.InnerException != null)\r\n                            Log.WriteLine(\"Exception Inner:   \" + ex.InnerException);\r\n                    }  \r\n                    // fail test\r\n                    // throw new System.IO.FileNotFoundException(\"SEC- Errors found! \", exc.ToString());\r\n                }               \r\n            });  \r\n            \r\n            // CSV file handling happens below. Loops thru the CSV file and collects every cell that has a value starting with (SEC-\r\n            // Also captures DB name, Run data and Run time.\r\n            using (Microsoft.VisualBasic.FileIO.TextFieldParser parser = new Microsoft.VisualBasic.FileIO.TextFieldParser(saveLocation + LatestFile.ToString()))\r\n            {                \r\n                parser.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited;\r\n                parser.SetDelimiters(\",\");\r\n                parser.HasFieldsEnclosedInQuotes = false;\r\n\r\n                while (!parser.EndOfData)\r\n                {\r\n                    string[] fields = parser.ReadFields();\r\n                                        \r\n                    for(int i = 0; i < fields.Length; i++)\r\n                    \r\n                    {\r\n                        if(fields[i].StartsWith(\"(SEC-\"))\r\n                        {\r\n                            excMessages = excMessages + fields[i] + \"\\n\\n\";                            \r\n                        }\r\n                                                \r\n                        else if(fields[i].StartsWith(\"Database Name\"))\r\n                        {\r\n                            reportEnvironment += fields[i] + \" \" + fields[i+1] + \"  --  \" + fields[i+2] + \"  \" + fields[i+3];                            \r\n                        }\r\n                        else if(fields[i].StartsWith(\"Run Time\"))\r\n                        {\r\n                            reportEnvironment += \"  --  \" + fields[i] + \"  \" + fields[i+1];                            \r\n                        }\r\n                    }                               \r\n                }\r\n                printMessages(excMessages, reportEnvironment); \r\n            }",
                "RequiresSilverlight": false,
                "WaitOnElements": true,
                "WaitOnElementsTimeout": 30000,
                "UseStepWaitOnElementsTimout": false,
                "SearchByImageFirst": 0,
                "Pause": 0,
                "RunsAgainstVersion": "",
                "Constraints": {
                  "__type": "ArtOfTest.Common.Design.Extensibility.Descriptors.DescriptorConstraints",
                  "__value": {
                    "ConstraintValues": {}
                  }
                },
                "Elements": {},
                "StepType": 4,
                "LogMessageOnFailure": "",
                "EditorType": "",
                "DataBindingExpressions": {}
              }
            },
            "Enabled": true,
            "Order": 2,
            "Id": "Report_Distribution_Script_CodedStep1",
            "StepState": 1,
            "ContinueOnFailure": false,
            "StepImageKey": "Report Distribution Scriptzscqtbff.esk",
            "QcId": 0,
            "QcVersionStamp": 0,
            "Version": 200
          }
        },
        {
          "__type": "ArtOfTest.WebAii.Design.ProjectModel.AutomationStep",
          "__value": {
            "Runtime ID": "bf5f7032-ed7f-41a0-8e23-e6278c54822e",
            "Description": "Wait for '2500' msec.",
            "CustomDescription": null,
            "Step": {
              "__type": "ArtOfTest.WebAii.Design.IntrinsicTranslators.Descriptors.SleepActionDescriptor",
              "__value": {
                "WaitTime": 2500,
                "WaitOnElements": true,
                "WaitOnElementsTimeout": 30000,
                "UseStepWaitOnElementsTimout": false,
                "SearchByImageFirst": 0,
                "Pause": 0,
                "RunsAgainstVersion": "",
                "Constraints": {
                  "__type": "ArtOfTest.Common.Design.Extensibility.Descriptors.DescriptorConstraints",
                  "__value": {
                    "ConstraintValues": {}
                  }
                },
                "Elements": {},
                "StepType": 4,
                "LogMessageOnFailure": "",
                "EditorType": "",
                "DataBindingExpressions": {}
              }
            },
            "Enabled": true,
            "Order": 3,
            "Id": "",
            "StepState": 0,
            "ContinueOnFailure": false,
            "StepImageKey": "Report Distribution Scriptppykubab.l1k",
            "QcId": 0,
            "QcVersionStamp": 0,
            "Version": 200
          }
        }
      ]
    },
    "IndependentDescriptors": [],
    "HtmlDescription": "",
    "SilverlightEnabled": false,
    "IsSilverlightApp": false,
    "SilverlightAppWebUrl": "",
    "SilverlightAppLocalDirectory": "",
    "SilverlightAppRecordLocal": false,
    "SilverlightAppOriginUri": null,
    "WpfAppPath": null,
    "UseDefaultWpfAppPath": false,
    "TestAssembly": "ReportDistribution.dll",
    "TestAssemblyPath": "bin",
    "TestClass": "ReportDistribution.Report_Distribution_Script",
    "IsManual": false,
    "ResourceFilePath": "Report Distribution Script.resx",
    "ElementImageStoreFilePath": "Report Distribution Script.imgstore",
    "HasCodeBehind": true,
    "DataInfo": {
      "__type": "ArtOfTest.Common.Design.Data.DataInfo",
      "__value": {
        "ConnectionString": "",
        "DefaultToGrid": true,
        "DataRange": "",
        "LoadRecordsCount": null,
        "DataTableName": "",
        "DataProvider": "",
        "DataEnabled": true,
        "HasBuiltinGrid": false,
        "DataType": 4,
        "BuiltInData": null,
        "BuiltInDocumentKey": null,
        "TSQL": ""
      }
    },
    "VSProperties": {},
    "DeploymentItems": [],
    "IsTestFragment": false,
    "StopTestListOnFailure": false,
    "InheritParentDataSource": false,
    "BrowserType": 0,
    "QcId": 0,
    "QcFilePath": null,
    "QcTestVersionStamp": 0,
    "TestLinks": [],
    "Description": "",
    "Name": "Report Distribution Script",
    "Owner": "",
    "Path": "Report Distribution Script.tstest",
    "Priority": 0,
    "TestType": 0,
    "UniqueId": "a4926cb2-dd40-445c-9f92-230e76b1cd8f",
    "Id": "a4926cb2-dd40-445c-9f92-230e76b1cd8f",
    "ProjectId": "720c5e63-3beb-434d-95c9-d56048d225fc",
    "Version": 200
  }
}